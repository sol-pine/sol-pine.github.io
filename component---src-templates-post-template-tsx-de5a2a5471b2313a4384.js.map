{"version":3,"file":"component---src-templates-post-template-tsx-de5a2a5471b2313a4384.js","mappings":"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","sources":["webpack://solog/./src/components/post/Contents.tsx","webpack://solog/./src/components/post/PostFooter.tsx","webpack://solog/./src/components/post/Title.tsx","webpack://solog/./src/templates/PostTemplate.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport React from \"react\";\n\ntype Props = {\n  html: string;\n};\n\nexport default function Contents({ html }: Props) {\n  return (\n    <Base>\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </Base>\n  );\n}\n\nconst Base = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 300px;\n  margin-top: 50px;\n  font-size: 16px;\n  font-weight: 400;\n\n  p {\n    font-size: 16px;\n    font-weight: 400;\n    margin-bottom: 24px;\n    word-wrap: break-word;\n    word-break: all;\n    line-height: 1.8;\n  }\n\n  strong {\n    font-weight: 700;\n  }\n\n  h1 {\n    font-size: 25px;\n    font-weight: 600;\n    margin: 30px 0;\n    @media (max-width: 500px) {\n      font-size: 20px;\n    }\n  }\n\n  h4 {\n    font-size: 20px;\n    font-weight: 600;\n    margin: 28px 0;\n    @media (max-width: 500px) {\n      font-size: 18px;\n    }\n  }\n\n  p a {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n\n  p > code,\n  li > code {\n    font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\n    padding: 2px 8px;\n    border-radius: 3px;\n    font-size: 14px;\n    background: #dfe2e5;\n    word-wrap: break-word;\n    word-break: all;\n  }\n\n  blockquote {\n    border-left: 5px solid #dfe2e5;\n    margin: 20px 0;\n    padding-left: 10px;\n  }\n\n  blockquote > p {\n    color: #6a737d;\n    font-weight: 600;\n  }\n\n  ol,\n  ul {\n    padding-left: 25px;\n  }\n\n  li > p,\n  ol {\n    line-height: 1.8;\n    margin: 8px 0;\n  }\n\n  li {\n    margin: 8px 0;\n    line-height: 1.8;\n  }\n\n  li > a {\n    line-height: 1.8;\n    margin: 8px 0;\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n\n  pre {\n    width: 100%;\n    margin: 20px auto;\n    .grvsc-line {\n      background: #000c18;\n    }\n    & .grvsc-source > span {\n      font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\n      width: 100%;\n      word-wrap: break-word;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n      font-size: 16px;\n      @media (max-width: 500px) {\n        font-size: 14px;\n      }\n    }\n  }\n\n  img {\n    width: 100%;\n    margin: 10px 0;\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport { Link } from \"gatsby\";\nimport React, { useMemo } from \"react\";\nimport { Fields } from \"../../templates/PostTemplate\";\n\ntype Props = {\n  currentSlug: string;\n  slugs: { node: { fields: Fields } }[];\n};\n\nexport default function PostFooter({ currentSlug, slugs }: Props) {\n  const slugList = useMemo(\n    () => slugs.map(({ node }) => node.fields.slug),\n    [slugs],\n  );\n\n  const currentIndex = slugList.indexOf(currentSlug);\n\n  return (\n    <Base>\n      <hr />\n      <div className=\"sectionWrapper\">\n        {currentIndex === 0 ? (\n          <p>이전 글이 없습니다</p>\n        ) : (\n          <Link to={`${slugList[currentIndex - 1]}`}>← 이전 글</Link>\n        )}\n        <Link to=\"/\">글 목록으로 돌아가기</Link>\n        {slugList.length !== currentIndex + 1 ? (\n          <Link to={`${slugList[currentIndex + 1]}`}>다음 글 →</Link>\n        ) : (\n          <p>다음 글이 없습니다</p>\n        )}\n      </div>\n    </Base>\n  );\n}\n\nconst Base = styled.div`\n  margin-top: 60px;\n  p {\n    color: #6a737d;\n  }\n  .sectionWrapper {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    margin-top: 20px;\n    font-size: 14px;\n    font-weight: 400;\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport { Link } from \"gatsby\";\nimport React, { useMemo } from \"react\";\n\ntype Props = {\n  emoji: string;\n  date: string;\n  title: string;\n  summary: string;\n  tags: string[];\n};\n\nexport default function Title({ emoji, date, title, summary, tags }: Props) {\n  const sortedTags = useMemo(() => tags.sort(), []);\n\n  return (\n    <Base>\n      <div className=\"emoji\">{emoji}</div>\n      <div className=\"sm\">{date}</div>\n      <div className=\"title\">{title}</div>\n      <div className=\"sm\">{summary}</div>\n      <section>\n        {sortedTags.map(tag => (\n          <Link className=\"tag\" key={tag} to={`/tag/?tag=${tag}`}>\n            #{tag}\n          </Link>\n        ))}\n      </section>\n    </Base>\n  );\n}\n\nconst Base = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 30px;\n  .emoji {\n    font-size: 60px;\n    @media (max-width: 500px) {\n      font-size: 50px;\n    }\n  }\n  .sm {\n    font-size: 14px;\n    font-weight: 400;\n    margin-top: 10px;\n  }\n  .title {\n    font-size: 30px;\n    font-weight: 600;\n    margin-top: 10px;\n    @media (max-width: 500px) {\n      font-size: 24px;\n    }\n  }\n  section {\n    display: flex;\n    gap: 10px;\n  }\n  .tag {\n    font-size: 14px;\n    margin-top: 10px;\n    text-decoration: underline;\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport { graphql } from \"gatsby\";\nimport React, { useMemo } from \"react\";\nimport { IFrontmatter } from \"../components/index/List\";\nimport Layout from \"../components/Layout\";\nimport Contents from \"../components/post/Contents\";\nimport PostFooter from \"../components/post/PostFooter\";\nimport Title from \"../components/post/Title\";\n\nexport type Fields = { slug: string };\n\ntype Data = {\n  data: {\n    currentPost: {\n      edges: {\n        node: {\n          fields: Fields;\n          html: string;\n          frontmatter: IFrontmatter;\n        };\n      }[];\n    };\n    postList: { edges: { node: { fields: Fields } }[] };\n  };\n};\n\nexport default function PostTemplate({\n  data: {\n    currentPost: { edges },\n    postList: { edges: listEdges },\n  },\n}: Data) {\n  const { emoji, date, title, summary, tags, html, currentSlug } = useMemo(\n    () => ({\n      emoji: edges[0]?.node.frontmatter.emoji,\n      date: edges[0]?.node.frontmatter.date,\n      title: edges[0]?.node.frontmatter.title,\n      summary: edges[0]?.node.frontmatter.summary,\n      tags: edges[0]?.node.frontmatter.tags,\n      html: edges[0]?.node.html,\n      currentSlug: edges[0]?.node.fields.slug,\n    }),\n    [edges],\n  );\n\n  const slugs = useMemo(() => listEdges, [listEdges]);\n\n  return (\n    <Layout>\n      <Wrapper>\n        <Title\n          emoji={emoji}\n          date={date}\n          title={title}\n          summary={summary}\n          tags={tags}\n        />\n        <Contents html={html} />\n        <PostFooter currentSlug={currentSlug} slugs={slugs} />\n      </Wrapper>\n    </Layout>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    currentPost: allMarkdownRemark(\n      filter: { fields: { slug: { eq: $slug } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          html\n          frontmatter {\n            date(formatString: \"YYYY년 MM월 DD일\")\n            emoji\n            title\n            summary\n            tags\n          }\n        }\n      }\n    }\n    postList: allMarkdownRemark(sort: { frontmatter: { date: ASC } }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Contents","html","___EmotionJSX","Base","className","dangerouslySetInnerHTML","__html","PostFooter","currentSlug","slugs","slugList","useMemo","map","node","fields","slug","currentIndex","indexOf","Link","to","length","target","name","styles","Title","emoji","date","title","summary","tags","sortedTags","sort","tag","key","PostTemplate","data","edges","currentPost","listEdges","postList","_edges$","frontmatter","_edges$2","_edges$3","_edges$4","_edges$5","_edges$6","_edges$7","Layout","Wrapper"],"sourceRoot":""}